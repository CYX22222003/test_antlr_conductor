// Generated from src/Rust.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";


export class RustLexer extends antlr.Lexer {
    public static readonly LET = 1;
    public static readonly CONST = 2;
    public static readonly FN = 3;
    public static readonly IF = 4;
    public static readonly IFEXR = 5;
    public static readonly ELSE = 6;
    public static readonly RETURN = 7;
    public static readonly WHILE = 8;
    public static readonly LOOP = 9;
    public static readonly BOOL = 10;
    public static readonly TYPE = 11;
    public static readonly MUT = 12;
    public static readonly NULL = 13;
    public static readonly ASSIGN = 14;
    public static readonly SEMI = 15;
    public static readonly COLON = 16;
    public static readonly COMMA = 17;
    public static readonly LPAREN = 18;
    public static readonly RPAREN = 19;
    public static readonly LBRACE = 20;
    public static readonly RBRACE = 21;
    public static readonly PLUS = 22;
    public static readonly MINUS = 23;
    public static readonly STAR = 24;
    public static readonly SLASH = 25;
    public static readonly EQ = 26;
    public static readonly NEQ = 27;
    public static readonly LT = 28;
    public static readonly GT = 29;
    public static readonly LEQ = 30;
    public static readonly GEQ = 31;
    public static readonly NOT = 32;
    public static readonly ARROW = 33;
    public static readonly AMP = 34;
    public static readonly IDENT = 35;
    public static readonly NUMBER = 36;
    public static readonly STRING_LITERAL = 37;
    public static readonly WHITESPACE = 38;
    public static readonly LINE_COMMENT = 39;
    public static readonly BLOCK_COMMENT = 40;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];

    public static readonly literalNames = [
        null, "'let'", "'const'", "'fn'", "'if'", "'ifexpr'", "'else'", 
        "'return'", "'while'", "'loop'", null, null, "'mut'", "'null'", 
        "'='", "';'", "':'", "','", "'('", "')'", "'{'", "'}'", "'+'", "'-'", 
        "'*'", "'/'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'!'", 
        "'->'", "'&'"
    ];

    public static readonly symbolicNames = [
        null, "LET", "CONST", "FN", "IF", "IFEXR", "ELSE", "RETURN", "WHILE", 
        "LOOP", "BOOL", "TYPE", "MUT", "NULL", "ASSIGN", "SEMI", "COLON", 
        "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "PLUS", "MINUS", 
        "STAR", "SLASH", "EQ", "NEQ", "LT", "GT", "LEQ", "GEQ", "NOT", "ARROW", 
        "AMP", "IDENT", "NUMBER", "STRING_LITERAL", "WHITESPACE", "LINE_COMMENT", 
        "BLOCK_COMMENT"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE",
    ];

    public static readonly ruleNames = [
        "LET", "CONST", "FN", "IF", "IFEXR", "ELSE", "RETURN", "WHILE", 
        "LOOP", "BOOL", "TYPE", "MUT", "NULL", "ASSIGN", "SEMI", "COLON", 
        "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "PLUS", "MINUS", 
        "STAR", "SLASH", "EQ", "NEQ", "LT", "GT", "LEQ", "GEQ", "NOT", "ARROW", 
        "AMP", "IDENT", "NUMBER", "STRING_LITERAL", "WHITESPACE", "LINE_COMMENT", 
        "BLOCK_COMMENT",
    ];


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, RustLexer._ATN, RustLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "Rust.g4"; }

    public get literalNames(): (string | null)[] { return RustLexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return RustLexer.symbolicNames; }
    public get ruleNames(): string[] { return RustLexer.ruleNames; }

    public get serializedATN(): number[] { return RustLexer._serializedATN; }

    public get channelNames(): string[] { return RustLexer.channelNames; }

    public get modeNames(): string[] { return RustLexer.modeNames; }

    public static readonly _serializedATN: number[] = [
        4,0,40,283,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,
        1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,137,8,9,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,152,8,10,1,
        11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,
        15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
        21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,
        27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,
        32,1,32,1,33,1,33,1,34,1,34,5,34,212,8,34,10,34,12,34,215,9,34,1,
        35,4,35,218,8,35,11,35,12,35,219,1,35,1,35,4,35,224,8,35,11,35,12,
        35,225,3,35,228,8,35,1,35,1,35,3,35,232,8,35,1,35,4,35,235,8,35,
        11,35,12,35,236,3,35,239,8,35,1,36,1,36,1,36,1,36,5,36,245,8,36,
        10,36,12,36,248,9,36,1,36,1,36,1,37,4,37,253,8,37,11,37,12,37,254,
        1,37,1,37,1,38,1,38,1,38,1,38,5,38,263,8,38,10,38,12,38,266,9,38,
        1,38,1,38,1,39,1,39,1,39,1,39,5,39,274,8,39,10,39,12,39,277,9,39,
        1,39,1,39,1,39,1,39,1,39,1,275,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        1,0,8,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
        57,2,0,69,69,101,101,2,0,43,43,45,45,4,0,10,10,13,13,34,34,92,92,
        3,0,9,10,13,13,32,32,2,0,10,10,13,13,297,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,81,1,0,0,0,3,85,1,0,0,0,5,
        91,1,0,0,0,7,94,1,0,0,0,9,97,1,0,0,0,11,104,1,0,0,0,13,109,1,0,0,
        0,15,116,1,0,0,0,17,122,1,0,0,0,19,136,1,0,0,0,21,151,1,0,0,0,23,
        153,1,0,0,0,25,157,1,0,0,0,27,162,1,0,0,0,29,164,1,0,0,0,31,166,
        1,0,0,0,33,168,1,0,0,0,35,170,1,0,0,0,37,172,1,0,0,0,39,174,1,0,
        0,0,41,176,1,0,0,0,43,178,1,0,0,0,45,180,1,0,0,0,47,182,1,0,0,0,
        49,184,1,0,0,0,51,186,1,0,0,0,53,189,1,0,0,0,55,192,1,0,0,0,57,194,
        1,0,0,0,59,196,1,0,0,0,61,199,1,0,0,0,63,202,1,0,0,0,65,204,1,0,
        0,0,67,207,1,0,0,0,69,209,1,0,0,0,71,217,1,0,0,0,73,240,1,0,0,0,
        75,252,1,0,0,0,77,258,1,0,0,0,79,269,1,0,0,0,81,82,5,108,0,0,82,
        83,5,101,0,0,83,84,5,116,0,0,84,2,1,0,0,0,85,86,5,99,0,0,86,87,5,
        111,0,0,87,88,5,110,0,0,88,89,5,115,0,0,89,90,5,116,0,0,90,4,1,0,
        0,0,91,92,5,102,0,0,92,93,5,110,0,0,93,6,1,0,0,0,94,95,5,105,0,0,
        95,96,5,102,0,0,96,8,1,0,0,0,97,98,5,105,0,0,98,99,5,102,0,0,99,
        100,5,101,0,0,100,101,5,120,0,0,101,102,5,112,0,0,102,103,5,114,
        0,0,103,10,1,0,0,0,104,105,5,101,0,0,105,106,5,108,0,0,106,107,5,
        115,0,0,107,108,5,101,0,0,108,12,1,0,0,0,109,110,5,114,0,0,110,111,
        5,101,0,0,111,112,5,116,0,0,112,113,5,117,0,0,113,114,5,114,0,0,
        114,115,5,110,0,0,115,14,1,0,0,0,116,117,5,119,0,0,117,118,5,104,
        0,0,118,119,5,105,0,0,119,120,5,108,0,0,120,121,5,101,0,0,121,16,
        1,0,0,0,122,123,5,108,0,0,123,124,5,111,0,0,124,125,5,111,0,0,125,
        126,5,112,0,0,126,18,1,0,0,0,127,128,5,116,0,0,128,129,5,114,0,0,
        129,130,5,117,0,0,130,137,5,101,0,0,131,132,5,102,0,0,132,133,5,
        97,0,0,133,134,5,108,0,0,134,135,5,115,0,0,135,137,5,101,0,0,136,
        127,1,0,0,0,136,131,1,0,0,0,137,20,1,0,0,0,138,139,5,110,0,0,139,
        140,5,117,0,0,140,152,5,109,0,0,141,142,5,98,0,0,142,143,5,111,0,
        0,143,144,5,111,0,0,144,152,5,108,0,0,145,146,5,115,0,0,146,147,
        5,116,0,0,147,148,5,114,0,0,148,149,5,105,0,0,149,150,5,110,0,0,
        150,152,5,103,0,0,151,138,1,0,0,0,151,141,1,0,0,0,151,145,1,0,0,
        0,152,22,1,0,0,0,153,154,5,109,0,0,154,155,5,117,0,0,155,156,5,116,
        0,0,156,24,1,0,0,0,157,158,5,110,0,0,158,159,5,117,0,0,159,160,5,
        108,0,0,160,161,5,108,0,0,161,26,1,0,0,0,162,163,5,61,0,0,163,28,
        1,0,0,0,164,165,5,59,0,0,165,30,1,0,0,0,166,167,5,58,0,0,167,32,
        1,0,0,0,168,169,5,44,0,0,169,34,1,0,0,0,170,171,5,40,0,0,171,36,
        1,0,0,0,172,173,5,41,0,0,173,38,1,0,0,0,174,175,5,123,0,0,175,40,
        1,0,0,0,176,177,5,125,0,0,177,42,1,0,0,0,178,179,5,43,0,0,179,44,
        1,0,0,0,180,181,5,45,0,0,181,46,1,0,0,0,182,183,5,42,0,0,183,48,
        1,0,0,0,184,185,5,47,0,0,185,50,1,0,0,0,186,187,5,61,0,0,187,188,
        5,61,0,0,188,52,1,0,0,0,189,190,5,33,0,0,190,191,5,61,0,0,191,54,
        1,0,0,0,192,193,5,60,0,0,193,56,1,0,0,0,194,195,5,62,0,0,195,58,
        1,0,0,0,196,197,5,60,0,0,197,198,5,61,0,0,198,60,1,0,0,0,199,200,
        5,62,0,0,200,201,5,61,0,0,201,62,1,0,0,0,202,203,5,33,0,0,203,64,
        1,0,0,0,204,205,5,45,0,0,205,206,5,62,0,0,206,66,1,0,0,0,207,208,
        5,38,0,0,208,68,1,0,0,0,209,213,7,0,0,0,210,212,7,1,0,0,211,210,
        1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,70,1,
        0,0,0,215,213,1,0,0,0,216,218,7,2,0,0,217,216,1,0,0,0,218,219,1,
        0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,227,1,0,0,0,221,223,5,
        46,0,0,222,224,7,2,0,0,223,222,1,0,0,0,224,225,1,0,0,0,225,223,1,
        0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,221,1,0,0,0,227,228,1,
        0,0,0,228,238,1,0,0,0,229,231,7,3,0,0,230,232,7,4,0,0,231,230,1,
        0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,235,7,2,0,0,234,233,1,
        0,0,0,235,236,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,239,1,
        0,0,0,238,229,1,0,0,0,238,239,1,0,0,0,239,72,1,0,0,0,240,246,5,34,
        0,0,241,245,8,5,0,0,242,243,5,92,0,0,243,245,9,0,0,0,244,241,1,0,
        0,0,244,242,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,247,1,0,
        0,0,247,249,1,0,0,0,248,246,1,0,0,0,249,250,5,34,0,0,250,74,1,0,
        0,0,251,253,7,6,0,0,252,251,1,0,0,0,253,254,1,0,0,0,254,252,1,0,
        0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,257,6,37,0,0,257,76,1,0,
        0,0,258,259,5,47,0,0,259,260,5,47,0,0,260,264,1,0,0,0,261,263,8,
        7,0,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,1,
        0,0,0,265,267,1,0,0,0,266,264,1,0,0,0,267,268,6,38,0,0,268,78,1,
        0,0,0,269,270,5,47,0,0,270,271,5,42,0,0,271,275,1,0,0,0,272,274,
        9,0,0,0,273,272,1,0,0,0,274,277,1,0,0,0,275,276,1,0,0,0,275,273,
        1,0,0,0,276,278,1,0,0,0,277,275,1,0,0,0,278,279,5,42,0,0,279,280,
        5,47,0,0,280,281,1,0,0,0,281,282,6,39,0,0,282,80,1,0,0,0,15,0,136,
        151,213,219,225,227,231,236,238,244,246,254,264,275,1,6,0,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!RustLexer.__ATN) {
            RustLexer.__ATN = new antlr.ATNDeserializer().deserialize(RustLexer._serializedATN);
        }

        return RustLexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(RustLexer.literalNames, RustLexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return RustLexer.vocabulary;
    }

    private static readonly decisionsToDFA = RustLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}